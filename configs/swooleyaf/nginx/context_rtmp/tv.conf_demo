server {
    listen 1935;
    access_log /home/logs/nginx/rtmp_xxxcn_tv.access.log;
    chunk_size 4000;
    on_connect http://api.tv.xxx.cn/connect;

    application myapp {
        live on;
        gop_cache on;
        allow play all;
        record all;
        record_path /home/www/mytv/flv_list;
        record_interval 2m;
        record_unique on;
        notify_method get;
        notify_update_timeout 10s;
        on_publish http://api.tv.xxx.cn/publish;
        on_publish_done http://api.tv.xxx.cn/publish_done;
        on_play http://api.tv.xxx.cn/play;
        on_play_done http://api.tv.xxx.cn/play_done;
        on_done http://api.tv.xxx.cn/done;
        on_record_done http://api.tv.xxx.cn/record_done;
        on_update http://api.tv.xxx.cn/update;
    }

    # Transcoding (ffmpeg needed)
    application big {
        live on;
        exec ffmpeg -re -i rtmp://tv.xxx.cn:1935/$app/$name -vcodec flv -acodec copy -s 32x32 -f flv rtmp://tv.xxx.cn:1935/small/${name};
    }
    application small {
        live on;
    }
    application webcam {
        live on;
        exec_static ffmpeg -f video4linux2 -i /dev/video0 -c:v libx264 -an -f flv rtmp://tv.xxx.cn:1935/webcam/mystream;
    }
    application mypush {
        live on;
        push rtmp1.example.com;
        push rtmp2.example.com:1934;
    }
    application mypull {
        live on;
        pull rtmp://rtmp3.example.com pageUrl=www.example.com/index.html;
    }
    application mystaticpull {
        live on;
        pull rtmp://rtmp4.example.com pageUrl=www.example.com/index.html name=mystream static;
    }
    application vod {
        play /var/flvs;
    }
    application vod2 {
        play /var/mp4s;
    }
    # HLS
    # profile (see ffmpeg example).
    # This example creates RTMP stream from movie ready for HLS:
    # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264
    #    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1
    #    -f flv rtmp://localhost:1935/hls/movie
    #
    # If you need to transcode live stream use 'exec' feature.
    application hls {
        live on;
        hls on;
        hls_path /tmp/hls;
        hls_fragment 10s;
    }
    # MPEG-DASH is similar to HLS
    application dash {
        live on;
        dash on;
        dash_path /tmp/dash;
    }
}