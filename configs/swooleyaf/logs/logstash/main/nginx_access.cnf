input {
  # nginx_access日志量较大,需要调大threads
  redis {
    batch_count => 1
    data_type => "list"
    key => "sla00_00001"
    host => "127.0.0.1"
    port => 6688
    password => "yjbn15su"
    db => 2
    threads => 10
  }
}

filter {
  if [server_type] == 'nginx-access' {
    grok {
      match => ["message", "(?<log_date>\S+)\s+(?<savetag1>\S+)\s+(?<client_ip>\S+)\s+(?<server_tag>\S+)"]
    }
    # 转换日志记录中的时间字符串,变成LogStash::Timestamp对象,然后转存到@timestamp字段
    date {
      locale => "en"
      match => ["log_date", "dd/MMM/yyyy:HH:mm:ss"]
    }
    geoip {
      source => "client_ip"
      fields => ["city_name", "country_code2", "country_name", "latitude", "longitude", "region_name"]
    }
    mutate {
      split => ["request_url", "?"]
      add_field => {
        "request_uri" => "%{[request_url][0]}"
        "[save_types][es]" => "logs"
        "[save_types][redis]" => "logs"
        "[save_types][clickhouse]" => "default.table"
        "[save_types][loki]" => "http://192.168.96.21:3100/loki/api/v1/push"
        "[save_types][dingding]" => "消息告警-日志异常:"
      }
      remove_field => ["redis_key", "@metadata", "input", "log", "[geoip][location]", "request_url", "log_date", "savetag1"]
      convert => {
        "response_status" => "integer"
      }
    }
    ruby {
      code => "
          event.set('log_timestamp',(event.get('@timestamp').to_f.round(3)*1000).to_i)
          request_time_ms = (event.get('request_time').to_f.round(3)*1000).to_i
          event.set('request_time',request_time_ms)
          upstream_time_ms = (event.get('upstream_time').to_f.round(3)*1000).to_i
          event.set('upstream_time',upstream_time_ms)
          ng_response_status = event.get('response_status').to_s
          if ng_response_status == '200' and request_time_ms < 500
              event.set('[save_types][es]','')
          end
      "
    }
  }
}
